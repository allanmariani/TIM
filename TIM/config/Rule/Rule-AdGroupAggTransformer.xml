<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AD Group Agg Transformer" type="GroupAggregationRefresh">
          
    
    <ReferencedRules>
                    
        
        <Reference class="sailpoint.object.Rule" name="RuleLibrary-SecurityIQConfiguration"/>
                  
    
    </ReferencedRules>
          
    
    <Source><![CDATA[
     
       import java.util.HashMap;
       import java.util.List;
       import java.util.Map;
       import sailpoint.api.*;
       import sailpoint.object.*;
       import sailpoint.tools.*;
       import sailpoint.tools.GeneralException;
       import sailpoint.object.EmailOptions;
       import sailpoint.object.EmailTemplate;
       import java.sql.*;
       // ========================================================
       //
       // Send Alert Email Notification for New Group
       //
       // ========================================================
       public void alertNotifyForNewGroup(ManagedAttribute ma, String description) 
          throws GeneralException 
       {
          String toEmail = "AppTeam@sailpointdemo.com";
          EmailTemplate template = (EmailTemplate) context.getObject(EmailTemplate.class, "Detected New Group Notification");
          Map mailArgs = new HashMap();
          mailArgs.put("groupName", ma.getValue());
          mailArgs.put("description", description);
          mailArgs.put("appName", ma.getApplication().getName());
          EmailOptions options = new EmailOptions(toEmail,mailArgs);
          options.setSendImmediate(true);
          options.setNoRetry(true);
          try {
             context.sendEmailNotification(template, options);
          }
          catch (Exception e) {
             serilog.debug("Error Sending Email: " + e);
          }
       }
       //
       //  ManagedAttribute objects support multiple languages...just use default locale
       //
       public String getDefaultLang() 
          throws GeneralException 
       {
          ObjectConfig config = ManagedAttribute.getObjectConfig();
          if (config == null) 
             throw new GeneralException("Missing object config for ManagedAttribute.");
          ObjectAttribute dl = config.getObjectAttributes().get(0);
          return (dl != null) ? dl.getName() : null;
       }
       //
       //  Handle incoming group object; determine if we're creating or updating
       //
       public boolean alreadyExists(ManagedAttribute ma)
          throws GeneralException 
       {
          ManagedAttribute existing = ManagedAttributer.get(context, ma.getApplicationId(), ma.getAttribute(), ma.getValue());
          if (existing == null) {
             //serilog.debug("...in CREATE mode");
             return false;
          } else {
             //serilog.debug("...in UPDATE mode");
             return true;
          }
       }
       
       //
       // Retrieve the Text Description from the Group Object
       //
       public String getDescription(Application app, ResourceObject ro)
       {
          String description = null;
          // TODO:  Change attribute name to correspond to group schema attribute for
          //        group description
          //
          if ( ro != null ) {
              description = (String) ro.getStringAttribute("description");
          }
          return description;
       }
       //
       // JDBC Connection
       // 
       private Connection getSIQRepoConnection() 
          throws Exception 
       {
          HashMap siqRepo = getSIQConnectionInformation();
          Map args = new HashMap();
          //args.put(JdbcUtil.ARG_USER, "FAM_User");
          //args.put(JdbcUtil.ARG_PASSWORD, "Sailp0!nt");
          //args.put(JdbcUtil.ARG_URL, 
          //   "jdbc:sqlserver://seri.sailpointdemo.com:1433;databaseName=FAMDB");
          //args.put(JdbcUtil.ARG_DRIVER_CLASS, "com.microsoft.sqlserver.jdbc.SQLServerDriver");
          args.put(JdbcUtil.ARG_USER,siqRepo.get("user"));
          args.put(JdbcUtil.ARG_PASSWORD, context.decrypt(siqRepo.get("password")));
          args.put(JdbcUtil.ARG_DRIVER_CLASS, siqRepo.get("driverClass"));
          args.put(JdbcUtil.ARG_URL, siqRepo.get("url"));             
          return JdbcUtil.getConnection(args);
       }  
       
       //
       // Call-out to SIQ repo to get applicable data classification
       //
       public String getDataClassification(Application app, ResourceObject ro) 
       {
          String classification = null;
          String objectSID = ro.getStringAttribute("objectSid");
          serilog.debug("objectSID is: " + objectSID);
          if (null == objectSID) {
             return "";
          }
          
          Connection c = null;
          try {
             c = getSIQRepoConnection();
             String sql = getSIQClassificationQuery(objectSID);
             //String sql = "select distinct dcc.Name " + 
             //   "from FAMDB.whiteops.data_classification_result dcr, FAMDB.whiteops.data_classification_category dcc, FAMDB.whiteops.ra_entitlements_roles_view rer, FAMDB.whiteops.ra_role rr " +
             //   "where rr.role_uid='"+objectSID+"' " +
             //   "AND dcr.br_id=rer.br_id and dcc.Id=dcr.CategoryId and rer.role_id = rr.id";
             List results = JdbcUtil.queryList(c, sql, null);
             serilog.debug("results: " + results);
             if (null != results) {
                classification =  Util.listToCsv(results);
             }
          } catch (GeneralException e) {
             serilog.debug("Hit exception querying SIQ. " + e.getStackTrace()); 
          }
          if (c != null) {
             JdbcUtil.closeConnection(c);
             c = null;
          }
          return classification;
       }
       //
       // Main Entry Point for AccountGroup (ManagedAttribute) Refresh Rule Logic
       //
       // NOTE:  As of 6.0, the input argument "accountGroup" is a handle to the
       //        ManagedAttribute object we're creating or updating (based on the
       //        ResourceObject we're aggregating).
       serilog=org.apache.commons.logging.LogFactory.getLog("SERI.Rule.GroupRefresh.CreateUpdateManagedAttribute");
       String defaultGroupOwner = "spadmin";
       // Get the Active Directory group owner from the schema
       //
       String groupOwner = obj.getStringAttribute("managedBy");
       if (null != groupOwner) {
          serilog.debug("....AD group owner coming in from AD is: " + groupOwner);
          // Find cube name associated with owner DN
          //
          Correlator lator = new Correlator(context);
          Link link = lator.findLinkByNativeIdentity(groupApplication, null, groupOwner);
          // Set owner on the ManagedAttribute object...
          //
          if (null != link) {
             Identity cube = link.getIdentity();
             if (null != cube) {
                accountGroup.setOwner(cube);
             }
          }
       }
       try {
          if (!alreadyExists(accountGroup)) {
             // Do CREATE stuff here....
             //alertNotifyForNewGroup(accountGroup, description);
          } else {
             // do UPDATE processing here...
          }
       
          String classification = getDataClassification(groupApplication, obj);
          if (classification != null) {
             String description = getDescription(groupApplication, obj);
             if (description == null)
                description = "";
             description+="\n<p><B>Attention! This group affords access to the following sensitive data: " + classification + "</B>";
             accountGroup.setAttribute("dataClassifications",classification);
             accountGroup.addDescription("en_US", description); }
       } catch (GeneralException e) {
          // Don't puke the agg because of this....
          serilog.debug("ERROR - Group Refresh Rule.  Cannot process ManagedAttribute object..." + e.toString());
       }
       // return the ManagedAttribute handle that was passed to us so it can be persisted
       //
       return accountGroup;
           
    ]]></Source>
        

</Rule>
